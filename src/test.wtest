import trenes.*

test "Cuantos vagones livianos tiene una formacion" {
	const vagon1 = new VagonDeCarga()
	const vagon2 = new VagonDeCarga()
	const vagon3 = new VagonDeCarga()
	vagon1.cargaMaxima(2000)
	vagon2.cargaMaxima(3000)
	vagon3.cargaMaxima(5000)
	const formacion1 = new Formacion()
	formacion1.agregarVagon(vagon1)
	formacion1.agregarVagon(vagon2)
	formacion1.agregarVagon(vagon3)
	assert.equals(1, formacion1.vagonesLivianos())

}
test "Velocidad maxima de una formacion"{
	const locom1 = new Locomotora()
	const locom2 = new Locomotora()
	const locom3 = new Locomotora()
	const formacion1 = new Formacion()
	locom1.velocMaxima(80)
	locom2.velocMaxima(50)
	locom3.velocMaxima(100)
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	formacion1.agregarLocomotora(locom3)
	assert.equals(50, formacion1.velocidadMaximaDeFormacion())
}

test "Ninguna locomotora arrastra hasta 5 veces su peso, por lo tanto la formacion es ineficiente"{
	const locom1 = new Locomotora()
	const locom2 = new Locomotora()
	locom1.peso(3000)
	locom2.peso(5000)
	locom1.pesoMaximoArrastre(10000)
	locom2.pesoMaximoArrastre(10000)
	const formacion1 = new Formacion()
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	assert.notThat(formacion1.esEficiente())	
}
test "El peso total de los vagones supera el arrastre util de la locomotora, por lo tanto la formacion no puede moverse"{
	const vagon1 = new VagonDeCarga()
	const vagon2 = new VagonDeCarga()
	vagon1.cargaMaxima(4000)
	vagon2.cargaMaxima(5000)
	const locom1 = new Locomotora()
	const locom2 = new Locomotora()
	locom1.peso(3000)
	locom2.peso(5000)
	locom1.pesoMaximoArrastre(8000)
	locom2.pesoMaximoArrastre(8000)
	const formacion1 = new Formacion()
	formacion1.agregarVagon(vagon1)
	formacion1.agregarVagon(vagon2)
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	assert.notThat(formacion1.formacionPuedeMoverse())
}
test "Si la formacion ya se puede mover, no le faltan kilos de empuje"{
	const vagon1 = new VagonDeCarga()
	const vagon2 = new VagonDeCarga()
	vagon1.cargaMaxima(4000)
	vagon2.cargaMaxima(5000)
	const locom1 = new Locomotora()
	const locom2 = new Locomotora()
	locom1.peso(3000)
	locom2.peso(5000)
	locom1.pesoMaximoArrastre(20000)
	locom2.pesoMaximoArrastre(28000)
	const formacion1 = new Formacion()
	formacion1.agregarVagon(vagon1)
	formacion1.agregarVagon(vagon2)
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	assert.equals(0, formacion1.cuantoEmpujeFalta())
}
test "Si la formacion es compleja, se necesita un conductor experimentado"{
	const vagon1 = new VagonDeCarga()
	const vagon2 = new VagonDeCarga()
	vagon1.cargaMaxima(4000)
	vagon2.cargaMaxima(5000)
	const locom1 = new Locomotora()
	const locom2 = new Locomotora()
	locom1.peso(3000)
	locom2.peso(5000)
	const formacion1 = new Formacion()
	formacion1.agregarVagon(vagon1)
	formacion1.agregarVagon(vagon2)
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	const depo1 = new Deposito()
	depo1.agregarFormacion(formacion1)
	assert.that(depo1.necesitaConductorExperimentado(formacion1))
}
test "Si la formacion no se mueve, le añadimos una locomotora suelta del deposito para que pueda mover la formacion"{
	const vagon1 = new VagonDeCarga()
	const vagon2 = new VagonDeCarga()
	vagon1.cargaMaxima(4000)
	vagon2.cargaMaxima(5000)
	const locom1 = new Locomotora()
	const locom2 = new Locomotora()
	locom1.peso(3000)
	locom1.pesoMaximoArrastre(10000)
	locom2.peso(5000)
	locom2.pesoMaximoArrastre(20000)
	const formacion1 = new Formacion()
	formacion1.agregarVagon(vagon1)
	formacion1.agregarVagon(vagon2)
	formacion1.agregarLocomotora(locom1)
	const depo1 = new Deposito()
	depo1.agregarLocomotoraSuelta(locom2)
	depo1.agregarFormacion(formacion1)
	assert.that(depo1.agregarLocomotoraParaMoverFormacion(formacion1))	
}

test "Si la formacion de corta distancia está bien armada"{
	const vagon1 = new VagonDePasajeros()
	vagon1.largoVagon(10)
	vagon1.anchoVagon(3)
	vagon1.cantidadBanios(2)
	const locom1 = new Locomotora()
	const locom2 = new Locomotora()
	locom1.peso(3000)
	locom1.pesoMaximoArrastre(10000)
	locom2.peso(5000)
	locom2.pesoMaximoArrastre(20000)
	const formacion1 = new FormacionLargaDistancia()
	formacion1.agregarVagon(vagon1)
	formacion1.agregarLocomotora(locom1)
	formacion1.agregarLocomotora(locom2)
	assert.that(formacion1.formacionBienArmada(formacion1))	
}
test "Velocidad maxima de formacion corta Distancia"{
	const vagon1 = new VagonDePasajeros()
	vagon1.largoVagon(10)
	vagon1.anchoVagon(3)
	const locom1 = new Locomotora()
	locom1.peso(3000)
	locom1.pesoMaximoArrastre(10000)
	locom1.velocMaxima(80)
	const formacion1 = new FormacionCortaDistancia()
	formacion1.agregarVagon(vagon1)
	formacion1.agregarLocomotora(locom1)
	assert.equals(60, formacion1.nuevaVelocidad())	
	
}

test "Velocidad maxima de formacion larga Distancia"{
	const vagon1 = new VagonDePasajeros()
	vagon1.largoVagon(10)
	vagon1.anchoVagon(3)
	const locom1 = new Locomotora()
	locom1.peso(3000)
	locom1.pesoMaximoArrastre(10000)
	locom1.velocMaxima(250)
	const formacion1 = new FormacionLargaDistancia()
	formacion1.poblacionDeCiudad(150000)
	formacion1.agregarVagon(vagon1)
	formacion1.agregarLocomotora(locom1)
	assert.equals(200, formacion1.nuevaVelocidad())	




}